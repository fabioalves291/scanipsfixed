#!/bin/python3
#!/usr/sbin/python3

import re
import sys
from ipaddress import IPv4Network

def extract_fixed_ips(file_path):
    fixed_ips = {}
    network_address = None
    subnet_mask = None
    config_ips = []
    with open(file_path, 'r', encoding="UTF-8") as file:
        for line in file:
            config_match = re.match(r'^\s*option\s+(domain-name-servers|netbios-name-servers|routers|subnet-mask|broadcast-address)\s+((?:\d{1,3}\.){3}\d{1,3}(?:,\s*(?:\d{1,3}\.){3}\d{1,3})*)', line)
            if config_match:
                ips = config_match.group(2).split(', ')
                config_ips.extend(ips)
            subnet_match = re.match(r'^\s*subnet\s+((?:\d{1,3}\.){3}\d{1,3})\s+netmask\s+((?:\d{1,3}\.){3}\d{1,3})', line)
            if subnet_match:
                network_address = subnet_match.group(1)
                subnet_mask = subnet_match.group(2)
            host_match = re.match(r'^\s*host\s+(\S+)\s*{', line)
            if host_match:
                host_name = host_match.group(1)
            else:
                ip_match = re.match(r'^\s*fixed-address\s+(\S+);', line)
                if ip_match and subnet_mask:
                    ip_address = ip_match.group(1)
                    fixed_ips[ip_address] = host_name
    return fixed_ips, network_address, subnet_mask, config_ips

def get_unused_ips(network_address, subnet_mask, fixed_ips, config_ips):
    network = IPv4Network(f'{network_address}/{subnet_mask}', strict=False)
    all_ips = [str(ip) for ip in network.hosts()]
    unused_ips = [ip for ip in all_ips if ip not in fixed_ips.keys() and ip not in config_ips]
    return unused_ips

def main():
    file_path = 'dhcpd.conf'
    
    if sys.version_info.major == 2:
        print("Este script requer Python 3 para ser executado.")
        sys.exit(1)
    
    fixed_ips, network_address, subnet_mask, config_ips = extract_fixed_ips(file_path)
    
    if network_address is None or subnet_mask is None:
        print("Não foi possível encontrar o endereço de rede no arquivo dhcpd.conf.")
        sys.exit(1)
    
    valid_ips = sorted([(ip, host_name) for ip, host_name in fixed_ips.items()], key=lambda x: x[1].lower())
    
    unused_ips = get_unused_ips(network_address, subnet_mask, fixed_ips, config_ips)
    
    max_host_name_length = max(len(host_name) for _, host_name in valid_ips)
    max_host_name_length += 2
    
    with open("ips_fixos.txt", "w") as fixed_ips_file:
        fixed_ips_file.write("Endereços IP fixos registrados:\n")
        fixed_ips_file.write("=" * 40 + "\n")
        fixed_ips_file.write(f"{'Nome do Host':<{max_host_name_length}}{'Endereço IP':<20}\n")
        fixed_ips_file.write("=" * 40 + "\n")
        for ip, host_name in valid_ips:
            fixed_ips_file.write(f"{host_name:<{max_host_name_length}}{ip:<20}\n")
        fixed_ips_file.write("=" * 40 + "\n")

    with open("ips_disponiveis.txt", "w") as available_ips_file:
        available_ips_file.write("Endereços IP disponíveis dentro da rede principal:\n")
        available_ips_file.write("=" * 40 + "\n")
        for ip in unused_ips:
            available_ips_file.write(ip + "\n")
        available_ips_file.write("=" * 40 + "\n")

if __name__ == "__main__":
    main()
